{"id":886545215,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1674862514,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/886545215/","is_pending":"Not Pending","title":"Concatenated Words","memory":"47.9 MB","code":"class Solution {\n    private HashMap<String, Boolean> memWords = new HashMap<String, Boolean>();\n    private HashMap<String, Boolean> memCombo = new HashMap<String, Boolean>();\n\n    public List<String> findAllConcatenatedWordsInADict(String[] words) {\n        ArrayList<String> answer = new ArrayList<String>();\n        for(int i = 0; i < words.length; i++)\n            memWords.put(words[i], true);\n        for(int i = 0; i < words.length; i++)\n        {\n            if(isValid(words[i], words, 0))\n                answer.add(words[i]);\n        }\n        return answer;\n\n    }\n\n    private boolean isValid(String s, String[] words, int count) //count refers to amount of words we have so far\n    {\n        // System.out.println(s + \" \" + count);\n        if (count > 0 && memWords.containsKey(s))\n            return true;\n        if (memCombo.containsKey(s))\n            return memCombo.get(s);\n        String test = \"\";\n        for(int i = 0; i < s.length()-1; i++)\n        {\n            test+=s.charAt(i);\n            if (memWords.containsKey(test))\n            {\n                \n                String newWord = s.substring(i+1, s.length());\n               \n                boolean val = isValid(newWord, words, count+1);\n                if(!memCombo.containsKey(newWord) && !memWords.containsKey(newWord))\n                    memCombo.put(newWord, val);\n                //  System.out.println(s + \" \" + newWord + \" \" + val);\n                if(val)\n                    return val;\n            }\n        }\n        return false;\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"concatenated-words","has_notes":false}