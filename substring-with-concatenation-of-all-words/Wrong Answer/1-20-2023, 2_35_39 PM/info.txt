{"id":882080274,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1674254139,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/882080274/","is_pending":"Not Pending","title":"Substring with Concatenation of All Words","memory":"N/A","code":"class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        HashSet wordsSet = new HashSet<String>();\n        ArrayList solutions = new ArrayList<Integer>();\n        for(int i = 0; i < words.length; i++)\n        {\n            if(!wordsSet.contains(words[i]))\n                wordsSet.add(words[i]);\n        }\n        // System.arraycopy(wordsSet.toArray(), 0, words, 0, wordsSet.size());\n        int wordLen = words[0].length();\n        for(int shift = 0; shift < wordLen; shift++) //will need to consider all possible frameshifts\n        {\n            int wordStart = shift;\n            while(wordStart < s.length() - wordLen)\n            {\n                HashSet<String> wordsSeen = new HashSet<String>(); //could do this with a binary array for maximum efficiency\n                int numWords = 0;\n                String word =\"\";\n                boolean check = false;\n                boolean seen = true;\n                do\n                {\n                    \n                    check = false;\n                    seen = true;\n                    word = s.substring(wordStart + numWords * wordLen, wordStart + (numWords+1) * wordLen);\n\n                    if(!wordsSeen.contains(word))\n                        seen = false;\n                    if(wordsSet.contains(word) && !seen)\n                    {\n                        check = true;\n                        wordsSeen.add(word);\n                        numWords++;\n                    }\n                    // System.out.println(word + \" \" + numWords);\n                    if(numWords == words.length)\n                    {\n                        wordsSeen.remove(s.substring(wordStart, wordStart + wordLen));\n                        solutions.add(wordStart);\n                        numWords--;\n                        wordStart += wordLen;\n\n                    }\n                } while(check && wordStart + numWords * wordLen < s.length() - wordLen);\n                if(seen)\n                    wordStart = wordStart + numWords * wordLen; // basically we start at the position that word appeared, \n                    //so like abcabc with word abc, now we'd be moved to position 2, note numWords would be = 1\n                else if(!wordsSet.contains(word))\n                    wordStart = wordStart + (numWords+1) * wordLen;// so askabc, if we first read ask, next time moved to abc\n                else\n                    wordStart = s.length();// we've ran out of words\n            }\n        }\n        return solutions;\n    }\n    \n}","compare_result":"1110000100011001100000011000111011111010000100011011110001010001010111111100111011101111011111011011010101111101011101110111101111111111111111111111011111111111111111111111110101","title_slug":"substring-with-concatenation-of-all-words","has_notes":false}