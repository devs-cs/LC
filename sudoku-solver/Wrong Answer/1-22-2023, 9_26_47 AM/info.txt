{"id":883197891,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1674408407,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/883197891/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"N/A","code":"class Solution { \n    public void solveSudoku(char[][] board) {\n        ArrayList<Integer>[][] pos = new ArrayList[9][9];\n        for(int i = 0; i < 9; i++)\n            for(int j = 0; j < 9; j++)\n                pos[i][j] = new ArrayList<Integer>();\n        int missing = 0;\n        for(int row = 0; row < 9; row++)\n        {\n            for(int col = 0; col < 9; col++)\n            {\n                if(board[row][col] == '.')\n                {\n                    missing++;\n                    for(int test = 1; test <= 9; test++)\n                    {\n                        if(check(row, col, test, board))\n                            pos[row][col].add(test);\n                    }\n                }\n            }\n        }\n\n        int lastMissing = 0;\n        int secondLastMissing = 0;\n        while(missing > 0)\n        {   \n            secondLastMissing = lastMissing;\n            lastMissing = missing;\n            if (missing == secondLastMissing)\n            {\n                System.out.println(\"Divergent Paths\");\n                break;\n            }\n            \n            for(int i = 0; i < 9; i++)\n            {\n                for(int j = 0; j < 9; j++)\n                {\n                    for(int num = 0; num < pos[i][j].size(); num++)\n                    {\n                        if(!check(i, j, pos[i][j].get(num), board)) //check and if a number is no longer a possibility, remove it\n                        {\n                            // System.out.println(\"REMOVE POSSIBILITY: \" + pos[i][j].get(num) + \" at \" + i + \",\" + j);\n                            pos[i][j].remove(num);\n                        }\n                    }\n                    if(pos[i][j].size() == 1)\n                    {\n                        \n                        board[i][j] = (char) (pos[i][j].get(0) + '0');\n                        // System.out.println(\"DECISION: \" + board[i][j] + \" at \" + i + \",\" + j);\n                        missing--;\n                        pos[i][j].remove(0);\n                    }\n                        \n                }\n            }\n        }\n        \n    }\n\n    private boolean check(int row, int col, int test, char[][] board)\n    {\n         \n        for(int i = 0; i < 9; i++)\n        {\n            // System.out.println(i + \" \" + col);\n            if(board[i][col] - '0' == test)\n                return false;\n            // System.out.println(col + \" \" + i);\n            if (board[row][i] - '0' == test)\n                return false;\n        }\n       \n        int cornerRow = row/3 * 3;\n        int cornerCol = col/3 * 3;\n        for(int i = cornerRow; i < cornerRow + 3; i++)\n        {\n            for(int j = cornerCol; j < cornerCol+3; j++)\n            {\n                if(board[i][j] - '0' == test)\n                    return false;\n            }\n        }\n        return true;\n    }\n}","compare_result":"101000","title_slug":"sudoku-solver","has_notes":false}