{"id":883316298,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1674424290,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/883316298/","is_pending":"Not Pending","title":"N-Queens II","memory":"38.7 MB","code":"class Solution {\n    private int sol = 0;\n    public int totalNQueens(int n) {\n        boolean[][] board = new boolean[n][n];\n        recur (board, n);\n        return sol;\n    }\n\n    private void recur(boolean[][] board, int n)\n    {\n        if(n == 0)\n        {\n            sol++;\n            return;\n        }\n        int row = board.length - n;//\n        for(int col = 0; col < board.length; col++)\n        {\n            if(check(board, row, col)) //in line of sight\n            {\n                board[row][col] = true; //a queen is there\n                recur(board, n-1);\n                board[row][col] = false;\n            }\n        }\n    }\n\n    private boolean check(boolean[][] board, int row, int col){\n        for(int i = 0; i < board.length; i++)\n        {\n            if(i!= col && board[row][i])\n                return false;\n            if(i!= row && board[i][col])\n                return false;\n            if(i!= row && row + col - i >= 0 && row + col - i < board.length && board[i][row + col - i])\n                return false;\n            if(i!= row && col-row + i >= 0 && col-row + i < board.length && board[i][col-row + i])\n                return false;\n\n        }\n        return true;\n    }\n}","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false}