{"id":885804640,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1674754877,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/885804640/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"55.7 MB","code":"class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        int n = matrix.length;\n        int m = matrix[0].length;\n        int[][] height = new int[n][m];\n        int curMax = 0;\n        //so each rectangle needs to have a least height that works, similar to the last problem, so first lets establish heights\n        for(int col = 0; col < m; col++)\n        {\n            int count = 0;\n            for(int row = 0; row < n; row++)\n            {\n                if(matrix[row][col] == '1')\n                    count++;\n                else\n                    count=0;\n                height[row][col] = count;\n            }\n        } //so height stores how many ones are above a certain number, now we want to store left and right, where left is the left smaller element and right is the right smaller element\n\n        int[][] right = new int[n][m];\n        int[][] left = new int[n][m];\n        //so we can use a stack\n        for(int i = 0; i < n; i++)\n        {\n            Stack<Integer> stack = new Stack<Integer>();\n            for(int j = 0; j < m; j++)\n            {\n                 if (stack.empty() || height[i][j] >= height[i][stack.peek()])\n                    stack.push(j); //col is only thing that matters\n                else\n                {\n                    while(!stack.empty() && height[i][stack.peek()] > height[i][j])\n                    {\n                        int col = stack.pop();\n                        right[i][col] = j-1;\n                    }\n                    stack.push(j); \n                }\n             }\n             while(!stack.empty())\n             {\n                int col = stack.pop();\n                right[i][col] = m-1;\n             }\n        }\n        for(int i = 0; i < n; i++)\n        {\n            Stack<Integer> stack = new Stack<Integer>();\n            for(int j = m-1; j>=0 ; j--)\n            {\n                 if (stack.empty() || height[i][j] >= height[i][stack.peek()])\n                    stack.push(j); //col is only thing that matters\n                else\n                {\n                    while(!stack.empty() && height[i][stack.peek()] > height[i][j])\n                    {\n                        int col = stack.pop();\n                        left[i][col] = j+1;\n                    }\n                    stack.push(j); \n                }\n             }\n             while(!stack.empty())\n             {\n                int col = stack.pop();\n                left[i][col] = 0;\n             }\n        }\n        for(int i = 0; i < n; i++)\n        {\n            for(int j = 0; j < m; j++)\n                curMax = Math.max(curMax, (right[i][j] - left[i][j] + 1) * height[i][j]);\n        }\n\n\n\n\n        if(right.length >= 3) System.out.println(Arrays.toString(right[2]));\n        if(right.length >= 3) System.out.println(Arrays.toString(left[2]));\n        return curMax;\n    }\n}\n\n\n\n/*\n for(int i = 0; i < n; i++)\n        {\n            if(matrix[i][0] == '1')\n            {\n                rectDim[i][0][0] = 1;\n                rectDim[i][0][0] = 1;\n            }\n        }\n        for(int i = 0; i < m; i++)\n        {\n            if(matrix[0][i] == '1')\n            {\n                rectDim[0][i] = 1;\n                rectDim[0][i] = 1;\n            }\n        }\n        for(int i = 1; i < n; i++)\n        {\n            for(int j = 1; j < m; j++)\n            {\n                int opt1 = Math.\n            }\n        }\n\n        */","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false}