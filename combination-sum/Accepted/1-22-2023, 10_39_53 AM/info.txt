{"id":883238037,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1674412793,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/883238037/","is_pending":"Not Pending","title":"Combination Sum","memory":"46.6 MB","code":"class Solution {\n\n    private ArrayList<List<Integer>> solutions = new ArrayList();\n    private int[] cand;\n    private int goal;\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        // Arrays.sort(candidates);\n        // cand = new int[candidates.length];\n        // for(int i =0; i < candidates.length; i++)\n        //     cand[i] = candidates[candidates.length - 1 - i];\n        cand = candidates;\n        goal = target;\n        \n        recur(new LinkedList(), 0, 0);\n        // System.out.println(solutions.getFirst());\n        return solutions;\n    }\n\n    // every solution has a unique ordering from low to high, \n\n    private void recur(LinkedList<Integer> list, int sum, int indexLast)\n    {\n        if(sum > goal)\n            return;\n        if(sum == goal)\n        {\n            LinkedList<Integer> newList = new LinkedList();\n            for(int i: list)\n                newList.add(i);\n            solutions.add(newList);\n            return;\n        }\n        for(int i = indexLast; i < cand.length; i++)\n        {\n            list.add(cand[i]);\n            recur(list, sum + cand[i], i);\n            list.removeLast();\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false}