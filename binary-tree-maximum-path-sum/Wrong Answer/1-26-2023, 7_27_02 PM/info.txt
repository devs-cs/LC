{"id":886032202,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1674790022,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/886032202/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\n //ok so we have two stores per node, largest path from below that ends there, and then largest path below\nclass Pair\n{\n    public int maxEnds, max;\n    public Pair(int a, int b)\n    {\n        max = a;\n        maxEnds = b;\n    }\n}\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        return recur(root).max;\n    }\n    private Pair recur(TreeNode node)\n    {\n        Pair p1 = null;\n        Pair p2 = null;\n        if(node.left != null)\n            p1 = recur(node.left);\n        if(node.right != null)\n            p2 = recur(node.right);\n        int maxEndsHere = 0;\n        int max = 0;\n        if (p1 != null && p2 != null)\n        {\n            max = Math.max(p1.max, p2.max);\n            maxEndsHere = Math.max(p1.maxEnds + p2.maxEnds + node.val, node.val);\n            maxEndsHere = Math.max(p1.maxEnds + node.val, maxEndsHere);\n            maxEndsHere = Math.max(p2.maxEnds + node.val, maxEndsHere);\n            max = Math.max(max, maxEndsHere);\n        }\n        else if (p1 != null)\n        {\n            max = p1.max;\n            maxEndsHere = p1.maxEnds + node.val;\n            maxEndsHere = Math.max(maxEndsHere, node.val);\n            max = Math.max(max, maxEndsHere);\n        }\n        else if (p2 != null)\n        {\n            max = p2.max;\n            maxEndsHere = p2.maxEnds + node.val;\n            maxEndsHere = Math.max(maxEndsHere, node.val);\n            max = Math.max(max, maxEndsHere);\n        }\n        else\n        {\n            max = node.val;\n            maxEndsHere = node.val;\n        }\n        System.out.println(node.val + \" \" + max + \" \" + maxEndsHere);\n        return new Pair(max, maxEndsHere);\n    }\n\n\n}","compare_result":"1111111111111111111000110111111111111111110111111111111101110111111011111110111110000000000000","title_slug":"binary-tree-maximum-path-sum","has_notes":false}