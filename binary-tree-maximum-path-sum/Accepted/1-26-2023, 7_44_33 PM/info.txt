{"id":886038483,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1674791073,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/886038483/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"43.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\n //ok so we have two stores per node, largest path from below that ends there, and then largest path below\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        return recur(root)[0];\n    }\n\n    private int[] recur(TreeNode node)\n    {\n\n        int[] p1, p2;\n        int maxEndsHere = 0;\n        int max = 0;\n        if (node.left != null&& node.right != null)\n        {\n            p1 = recur(node.left);\n            p2 = recur(node.right);\n            max = Math.max(p1[0], p2[0]);\n            max = Math.max(max, p1[1] + p2[1] + node.val);\n            maxEndsHere = node.val;\n            maxEndsHere = Math.max(p1[1] + node.val, maxEndsHere);\n            maxEndsHere = Math.max(p2[1] + node.val, maxEndsHere);\n            max = Math.max(max, maxEndsHere);\n        }\n        else if (node.left != null)\n        {\n            p1 = recur(node.left);\n            max = p1[0];\n            maxEndsHere = p1[1] + node.val;\n            maxEndsHere = Math.max(maxEndsHere, node.val);\n            max = Math.max(max, maxEndsHere);\n        }\n        else if (node.right != null)\n        {\n            p2 = recur(node.right);\n            max = p2[0];\n            maxEndsHere = p2[1] + node.val;\n            maxEndsHere = Math.max(maxEndsHere, node.val);\n            max = Math.max(max, maxEndsHere);\n        }\n        else\n        { \n            max = node.val;\n            maxEndsHere = node.val;\n        }\n        return (new int[]{max, maxEndsHere});\n    }\n\n\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false}