{"id":883280731,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1674418534,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/883280731/","is_pending":"Not Pending","title":"Wildcard Matching","memory":"N/A","code":"class Solution {\n    public boolean isMatch(String s, String p) {\n        String[] subP = p.split(\"\\\\*\");\n        System.out.println(Arrays.toString(subP));\n        int index = 0;\n        if(subP.length == 0)\n            return true;\n        if(subP[0].length() != 0)\n        {\n            if(!check(s.substring(0, subP[0].length()), subP[0]))\n                return false;;\n        }\n        int n = subP.length;\n        if (subP[n-1].length() != 0 )\n        {\n            String substring = s.substring(s.length() - subP[n-1].length(), s.length());\n            if(!check(substring, subP[n-1]))\n                return false;\n        }\n        System.out.println(\"Got here\");\n        for(int i = 1; i < n-1; i++) //we are not checking the first and last because we just did that\n        {\n            if (subP[i].length() == 0) //just means **\n                continue;\n            index = baseMatch(index, s, subP[i]);\n            if(index == -1)\n                return false;\n        }\n        return true;\n\n    }\n\n    private int baseMatch(int index, String s, String p){ //this checks whether a substring starting after index matches a pattern with no *\n        int size = p.length();\n        for(int start = index; start + size< s.length(); start++)\n        {\n            String region = s.substring(start, start + size);\n            if(check(region, p))\n                return start + size;\n        }\n        return -1;\n    }\n\n    private boolean check(String s, String p)\n    {\n        if(p.length() != s.length())\n            return false;\n        for(int i = 0; i < s.length(); i++)\n        {\n            if(p.charAt(i) == '?')\n                continue;\n            if(p.charAt(i) != s.charAt(i))\n                return false;\n        }\n        return true;\n    }\n\n}","compare_resulttitle_slug":"wildcard-matching","has_notes":false}