{"id":886025207,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1674788782,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/886025207/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock III","memory":"83.4 MB","code":"class Solution {\n\n\n    //we basically want a max and min seg-tree\n    public int maxProfit(int[] prices) {\n    \n        int n = prices.length;\n        /*\n        we can easily calculate the profit from the first sell, then how do we calc the profit from the second sell\n        , actually find the largest jump after a point by going backwards\n        */\n        int[] gap = new int[n];\n        int minVal = prices[0];\n        gap[0] = 0;\n        for(int i = 1; i < n; i++)\n        {\n            minVal = Math.min(minVal, prices[i]);\n            gap[i] = Math.max(gap[i-1], prices[i] - minVal); //largest gap before i \n        }\n        int[] revGap = new int[n];\n        revGap[n-1] = 0;\n        int max = prices[n-1];\n        for(int i = n-2; i >=0; i--)\n        {\n            max = Math.max(prices[i], max);\n            revGap[i] = Math.max(max - prices[i], revGap[i+1]);\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++)\n            ans = Math.max(ans, gap[i] + revGap[i]);\n        return ans;        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock-iii","has_notes":false}