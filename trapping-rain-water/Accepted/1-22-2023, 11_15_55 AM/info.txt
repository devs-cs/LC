{"id":883255019,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1674414955,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/883255019/","is_pending":"Not Pending","title":"Trapping Rain Water","memory":"50.2 MB","code":"class Solution {\n    public int trap(int[] height) {\n        int max = 0;\n        for(int i = 0; i < height.length; i++)\n            max = Math.max(height[i], max);\n        int[] firstReach = new int[max+1];\n        Arrays.fill(firstReach, 10000);\n        int[] lastReach = new int[max+1];\n        for(int i = 0; i < height.length; i++)\n        {\n            if(firstReach[height[i]] == 10000)\n                firstReach[height[i]] = i;\n            lastReach[height[i]] = i;\n        }\n        for(int i = max-1; i >= 0; i--)\n        {\n                firstReach[i] = Math.min(firstReach[i+1], firstReach[i]);\n                lastReach[i] = Math.max(lastReach[i+1], lastReach[i]);\n        }\n\n        //use prefix sums to count how many buildings surpass a certain height\n        \n        int[] reachN = new int[max+1];\n        for(int i = 0; i < height.length; i++)\n            reachN[height[i]]++;\n        for(int i = max-1; i>=0; i--)\n            reachN[i] += reachN[i+1]; //now it represents how many people meet or exceed that height, let's test it out\n        // System.out.println(Arrays.toString(reachN));\n\n        int output = 0;\n        for(int i = 1; i <= max;i++)\n            output += lastReach[i] - firstReach[i] + 1 - reachN[i];\n        return output;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trapping-rain-water","has_notes":false}