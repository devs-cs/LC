{"id":827696078,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1666410549,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/827696078/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"44.2 MB","code":"class Solution {\n    public String minWindow(String s, String t) {\n        HashMap<Character, Integer> needed = new HashMap<>();\n        int stores = 0;\n        int front = 0;\n        boolean cont = true;\n        int end = -1;\n        int[] shortest = new int[s.length()];//shortest[i] is shortest substring that ends at index i\n        for(int i = 0; i < t.length(); i++)\n        {\n            if(needed.containsKey(t.charAt(i)))\n            {\n                needed.put(t.charAt(i), needed.get(t.charAt(i))+1);\n               \n            }\n                \n            else\n            {\n                 needed.put(t.charAt(i), 1);\n            }\n               \n        }\n        \n        \n        while(stores<t.length())\n        {\n            end++;\n            if(end >=s.length())\n                return \"\";\n            if(needed.containsKey(s.charAt(end)))\n            {\n                if(needed.get(s.charAt(end)) > 0)\n                    stores++;\n                needed.put(s.charAt(end),needed.get(s.charAt(end)) -1);\n            }\n        }\n        if(stores < t.length() && end == s.length())\n            return(\"\");\n        \n        while(!needed.containsKey(s.charAt(front)) || needed.get(s.charAt(front)) < 0 && front <= end)\n        {\n            if(needed.containsKey(s.charAt(front)))\n               needed.put(s.charAt(front),needed.get(s.charAt(front)) +1);\n            front++;\n        }\n               \n        for(int i = 0; i < end; i++)\n               shortest[i] = -1;\n        shortest[end] = front;\n        for(int i = end+1; i < s.length(); i++)\n        {\n            if(needed.containsKey(s.charAt(i)))\n                needed.put(s.charAt(i),needed.get(s.charAt(i)) -1);\n            //System.out.println(\"C Sit: \" + needed.get('c'));\n            while(!needed.containsKey(s.charAt(front)) || needed.get(s.charAt(front)) < 0)\n            {\n                \n                if(needed.containsKey(s.charAt(front)))\n                {\n                    //System.out.println(\"UPDATE FRONT:\" + s.charAt(front));\n                     needed.put(s.charAt(front),needed.get(s.charAt(front)) +1);\n                }\n                front++;\n                  \n            }\n            shortest[i] = front;\n            //System.out.println(front + \" \" + i + \" \" + needed.get('B'));\n        }\n        //System.out.println(front + \" \" + end + \" \" + needed.get('C'));\n        /*for(int i = 0; i < s.length(); i++)\n            System.out.print(shortest[i] + \" \");*/\n        int maxIndex = -1;\n        for(int i = 0; i < s.length(); i++)\n        {\n            if(shortest[i] !=-1 && (maxIndex == -1 || i-shortest[i] < maxIndex - shortest[maxIndex]))\n                maxIndex = i;\n        }\n        \n        //ADOBECO\n        \n        return s.substring(shortest[maxIndex], maxIndex+1);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false}