{"id":883245324,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1674413700,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/883245324/","is_pending":"Not Pending","title":"Combination Sum II","memory":"50.9 MB","code":"class Solution {\n    private ArrayList<List<Integer>> solutions = new ArrayList();\n    private int[] cand;\n    private int goal;\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        cand = candidates;\n        Arrays.sort(cand);\n        goal = target;\n        recur(new LinkedList<Integer>(), 0, 0, false, -1);\n        return solutions;\n    }\n\n    private void recur(LinkedList<Integer> list, int sum, int index, boolean acceptLast, int last)\n    {\n        // System.out.println(index + \" \" + list);\n        if(sum > goal)\n            return;\n        if(index == cand.length && sum == goal)\n        {\n            LinkedList<Integer> newList = new LinkedList();\n            for(int i: list)\n                newList.add(i);\n            solutions.add(newList);\n            return;\n        }\n        else if (index == cand.length)\n            return;\n        \n\n        if(cand[index] == last && acceptLast)\n        {\n            list.add(cand[index]);\n            recur(list, sum + cand[index], index+1, true, cand[index]);\n            list.removeLast();\n        }\n        else\n        {\n            list.add(cand[index]);\n            recur(list, sum + cand[index], index+1, true, cand[index]);\n            list.removeLast();\n            recur(list, sum, index+1, false, cand[index]);\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false}