{"id":768838957,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1660001730,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/768838957/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    public int lengthOfLIS(int[] nums) \n    {\n        int[] store = new int[20001]; // might need to use sorting tricks to compactify numbers into range of 1 to 2500\n        int minNum = 10001;\n        for(int i = 0; i < nums.length; i++)\n            if(nums[i] < minNum)\n                minNum = nums[i];\n        for(int i = 0; i< nums.length;i++)\n            nums[i] = nums[i] - minNum;\n        for(int i = nums.length - 1; i >=0; i--)\n        {\n            int max = 0;\n            for(int j = nums[i]+1; j < store.length;j++)\n            {\n                if(store[j] > max)\n                    max = store[j];\n            }\n            if(max + 1 > store[i])\n                store[nums[i]] = max+1;\n        }\n        int sol = 0;\n        for(int i = 0; i < store.length; i++)\n        {\n            if(store[i] > sol)\n                sol = store[i];\n        }\n        return(sol);\n    \n    }\n}","compare_result":"111111111111111010111111111111011111110000100100101101","title_slug":"longest-increasing-subsequence","has_notes":false}